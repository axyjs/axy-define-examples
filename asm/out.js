axy.define("/src/asm.js", "\"use strict\";\n\nrequire(\"axy-define-asm/bin/axy-define-asm.js\");\n\n");

axy.define("/src/color.js", "\"use strict\";\n\nexports.color = function (color) {\n    global.window.document.body.style.backgroundColor = \"grey\";\n};\n\n");

axy.define("/src/load.js", "\"use strict\";\n\nmodule.exports = function (sandbox, child) {\n    \n    var fs = require(\"fs\");\n    \n    function scandir(dir) {\n        fs.readdirSync(dir).forEach(function (file) {\n            var fn = dir + \"/\" + file;                \n            if (fs.statSync(fn).isDirectory()) {\n                scandir(fn);\n            } else {           \n                eval(fs.readFileSync(fn, \"utf-8\"));\n            }\n        });\n    }\n    \n    function done() {\n        process.stdout.write(\"Done\");     \n        if (child) {\n            scandir(\"/out\");\n            module.exports(child);\n            var args = [\n                \"--source=/src\",\n                \"--outDir=/out\",\n                \"--verbose=2\"\n            ];\n            child.require(\"/src/load.js\", {argv: args})(child);\n        } else {\n            require(\"./color\").color(\"grey\");\n        }\n    }\n\n    if (!require(\"axy-define-asm/index.js\").runCLI(process.argv.slice(2), done)) {\n        process.exit(1);\n    }\n};\n");

axy.define("/src/node_modules/axy-define-asm/index.js", "\"use strict\";\n\nexports.runCLI = require(\"./lib/cli.js\").runCLI;\nexports.run = require(\"./lib/api.js\").run;\n");

axy.define("/src/node_modules/axy-define-asm/package.json", "{\n    \"name\": \"axy-define-asm\",\n    \"version\": \"0.1.0\",\n    \"description\": \"Assembly axy.define project\",\n    \"license\": \"MIT\",\n    \"homepage\": \"https://github.com/axyjs/axy-define-asm\",\n    \"author\": \"Oleg Grigoriev <go.vasac@gmail.com>\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/axyjs/axy-define-asm\"\n    },\n    \"main\": \"index.js\",\n    \"dependencies\": {},\n    \"keywords\": [\n        \"CommonJS\"\n    ],\n    \"dependencies\": {\n        \"axy-cli-opts\": \"~0.0.1\"\n    },\n    \"devDependencies\": {\n        \"grunt\": \"~0.4.5\",\n        \"grunt-ts\": \"4.0.1\",\n        \"grunt-contrib-nodeunit\": \"~0.4.1\",\n        \"grunt-tslint\": \"2.0.0\",\n        \"grunt-contrib-jshint\": \"~0.11.1\",\n        \"grunt-jsonlint\": \"~1.0.4\",\n        \"grunt-contrib-uglify\": \"0.8.1\"\n    }\n}\n");

axy.define("/src/node_modules/axy-define-asm/bin/axy-define-asm.js", "var success = false;\n\nprocess.on(\"exit\", function () {\n    if (!success) {\n        console.error(\"The task is made not to the end\");\n    }\n});\n\nfunction done() {\n    success = true;\n}\n\nif (!require(\"./../index.js\").runCLI(process.argv.slice(2), done)) {\n    process.exit(1);\n}\n");

axy.define("/src/node_modules/axy-define-asm/lib/.baseDir.js", "// Ignore this file. See https://github.com/grunt-ts/grunt-ts/issues/77 \n");

axy.define("/src/node_modules/axy-define-asm/lib/api.js", "\"use strict\";\nvar optionsAPI = require(\"./options/api\");\nvar contextMo = require(\"./context/index\");\nfunction run(options, done) {\n    if (done === void 0) { done = null; }\n    var context;\n    options = optionsAPI.merge(options);\n    try {\n        context = new contextMo.Context(options, done);\n        context.finder.run();\n    }\n    catch (e) {\n        console.error(e.message);\n        done();\n        return false;\n    }\n    return true;\n}\nexports.run = run;\n");

axy.define("/src/node_modules/axy-define-asm/lib/asm.js", "\"use strict\";\nfunction run(options, logger) {\n    return true;\n}\nmodule.exports = run;\n");

axy.define("/src/node_modules/axy-define-asm/lib/cli.js", "/// <reference path=\"../node_modules/axy-cli-opts/index.d.ts\" alias=\"axy-cli-opts\" />\n\"use strict\";\nvar api = require(\"./api\");\nvar optionsCLI = require(\"./options/cli\");\nvar opts = require(\"axy-cli-opts\");\nvar domain = require(\"domain\");\nfunction runCLI(argv, done) {\n    var options, d, result;\n    try {\n        opts.parse(argv, optionsCLI.format);\n        options = (opts.parse(argv, optionsCLI.format).options);\n    }\n    catch (e) {\n        console.log(\"Error: \" + e.message);\n        console.log(\"Format: axy-define-asm --source=[dir|file] <other options>\");\n        console.log(\"\");\n        console.log(opts.help(optionsCLI.format));\n        if (done) {\n            done();\n        }\n        return false;\n    }\n    d = domain.create();\n    d.on(\"error\", function (err) {\n        if (options.error) {\n            throw err;\n        }\n        else {\n            console.log(\"Internal error\");\n            process.exit(1);\n        }\n    });\n    d.run(function () {\n        result = api.run(options, done);\n    });\n    return result;\n}\nexports.runCLI = runCLI;\n");

axy.define("/src/node_modules/axy-define-asm/lib/dir.js", "\"use strict\";\nfunction nativeReaddir(dir) {\n    var files = [], dirs = [], result = { files: files, dirs: dirs }, fs = require(\"fs\");\n    fs.readdirSync(dir).forEach(function (item) {\n        if (fs.statSync(dir + \"/\" + item).isDirectory()) {\n            dirs.push(item);\n        }\n        else {\n            files.push(item);\n        }\n    });\n    return result;\n}\nexports.nativeReaddir = nativeReaddir;\nfunction read(dir, context) {\n    if (!context.result) {\n        context.result = [];\n    }\n    if (context.readdir) {\n        context.readdir = nativeReaddir;\n    }\n    return context.result;\n}\nexports.read = read;\n");

axy.define("/src/node_modules/axy-define-asm/lib/logger.js", "\"use strict\";\nvar Logger = (function () {\n    function Logger(level, prev) {\n        if (level === void 0) { level = 0; }\n        if (prev === void 0) { prev = null; }\n        this.level = level;\n        this.prev = prev;\n        if (!prev) {\n            this.prev = console.log;\n        }\n    }\n    Logger.prototype.log = function (message, level) {\n        if (level === void 0) { level = 1; }\n        if (level <= this.level) {\n            this.prev.call(null, message);\n        }\n    };\n    Logger.prototype.error = function (message) {\n        this.log(message);\n    };\n    return Logger;\n})();\nexports.Logger = Logger;\n");

axy.define("/src/node_modules/axy-define-asm/lib/options.js", "/**\n * Assembly options\n */\n\"use strict\";\n/**\n * Default values of the options\n */\nexports.defaults = {\n    source: null,\n    outDir: null,\n    outSelf: false,\n    outFile: null,\n    out: true,\n    root: \"/\",\n    define: \"axy.define\",\n    appendVars: \"global, process\",\n    globalWrapper: false,\n    addExt: [],\n    all: false,\n    ignoreExt: [],\n    ignoreFile: [],\n    ignoreDir: [],\n    sourceMap: false,\n    verbose: false,\n    useStrict: false,\n    utime: false,\n    error: false,\n    filter: null,\n    wrap: null\n};\n/**\n * Merges custom options and defaults\n *\n * @param {object} custom\n * @return {object}\n */\nfunction merge(custom) {\n    var result = {}, k;\n    for (k in exports.defaults) {\n        if (exports.defaults.hasOwnProperty(k)) {\n            if (custom.hasOwnProperty(k)) {\n                result[k] = custom[k];\n            }\n            else {\n                result[k] = exports.defaults[k];\n            }\n        }\n    }\n    return result;\n}\nexports.merge = merge;\n/**\n * The format of command line options\n * @see axy-cli-opts\n */\nexports.cliFormat = {\n    source: {\n        short: \"s\",\n        description: \"Source file or directory\",\n        descriptionVal: \"dir|file\"\n    },\n    outDir: {\n        defaults: null,\n        description: \"Output directory (follow the structure of source)\",\n        descriptionVal: \"dir\"\n    },\n    outFile: {\n        defaults: null,\n        description: \"Assemble to a single file\",\n        descriptionVal: \"file\"\n    },\n    outSelf: {\n        flag: true,\n        description: \"Rewrite source file(s)\"\n    },\n    out: {\n        short: \"o\",\n        flag: true,\n        description: \"Output to stdout\"\n    },\n    root: {\n        short: \"r\",\n        description: \"Root directory\",\n        descriptionVal: \"dir\",\n        defaults: \"/\"\n    },\n    define: {\n        short: \"d\",\n        defaults: \"axy.define\",\n        description: \"Name of define function (axy.define by default)\",\n        descriptionVal: \"prefix\"\n    },\n    appendVars: {\n        defaults: \"process, global\",\n        description: \"Append vars to the wrapper (by default 'process, global')\",\n        descriptionVal: \"vars\"\n    },\n    globalWrapper: {\n        flag: true,\n        description: \"Top wrapper for appendVars\"\n    },\n    addExt: {\n        many: true,\n        defaults: [],\n        description: \"Add an extension to assembly\",\n        descriptionVal: \"ext\"\n    },\n    all: {\n        short: \"a\",\n        flag: true,\n        description: \"Add all files\"\n    },\n    ignoreExt: {\n        many: true,\n        defaults: [],\n        description: \"Ignore an extension\",\n        descriptionVal: \"ext\"\n    },\n    ignoreFile: {\n        many: true,\n        defaults: [],\n        description: \"Ignore a file\",\n        descriptionVal: \"file\"\n    },\n    ignoreDir: {\n        many: true,\n        defaults: [],\n        description: \"Ignore a dir\",\n        descriptionVal: \"dir\"\n    },\n    sourceMap: {\n        flag: true,\n        description: \"Changing the source map\"\n    },\n    verbose: {\n        flag: true,\n        type: \"id\",\n        description: \"Verbose level (1, 2), silence by default\",\n        descriptionVal: \"level\"\n    },\n    useStrict: {\n        short: \"u\",\n        flag: true,\n        description: \"Add 'use strict'\"\n    },\n    utime: {\n        short: \"t\",\n        flag: true,\n        description: \"Check update time of destination files\"\n    },\n    error: {\n        short: \"e\",\n        flag: true,\n        description: \"Show information about errors\"\n    }\n};\n");

axy.define("/src/node_modules/axy-define-asm/lib/output.js", "var Output = (function () {\n    function Output(options, logger) {\n        this.options = options;\n    }\n    Output.prototype.save = function (filename, content) {\n    };\n    Output.prototype.flush = function () {\n    };\n    return Output;\n})();\nexports.Output = Output;\n");

axy.define("/src/node_modules/axy-define-asm/lib/context/check.js", "\"use strict\";\nfunction check(options) {\n    var outO;\n    if (!options.source) {\n        throw new Error(\"Required option --source (-s)\");\n    }\n    [\"outDir\", \"outFile\", \"outSelf\"].forEach(function (opt) {\n        if (options[opt]) {\n            if (outO) {\n                throw new Error(\"Options --\" + outO + \" and --\" + opt + \" can not be used together\");\n            }\n            outO = opt;\n        }\n    });\n    if (options.out) {\n        if (options.verbose) {\n            throw new Error(\"Options --out and --verbose can not be used together\");\n        }\n    }\n    else if (!outO) {\n        throw new Error(\"Required one of the options --out*\");\n    }\n}\nmodule.exports = check;\n");

axy.define("/src/node_modules/axy-define-asm/lib/context/counter.js", "\"use strict\";\nvar Counter = (function () {\n    function Counter(tDone, debug) {\n        var _this = this;\n        if (debug === void 0) { debug = false; }\n        this.tDone = tDone;\n        this.debug = debug;\n        /* tslint:disable:typedef */\n        this.done = function (message) {\n            if (message === void 0) { message = null; }\n            _this.count -= 1;\n            if (_this.debug) {\n                console.log(\"Done \" + message + \" [\" + _this.count + \"]\");\n            }\n            if (_this.count !== 0) {\n                return false;\n            }\n            if (typeof _this.tDone === \"function\") {\n                _this.tDone.call(null);\n            }\n            return true;\n        };\n        /* tslint:enable:typedef */\n        this.count = 0;\n    }\n    Counter.prototype.begin = function (message) {\n        if (message === void 0) { message = null; }\n        this.count += 1;\n        if (this.debug) {\n            console.log(\"Begin \" + message + \" [\" + this.count + \"]\");\n        }\n    };\n    return Counter;\n})();\nexports.Counter = Counter;\n");

axy.define("/src/node_modules/axy-define-asm/lib/context/dest.js", "\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar Dest = (function () {\n    function Dest(context) {\n        this.context = context;\n    }\n    Dest.prototype.flush = function () {\n    };\n    return Dest;\n})();\nexports.Dest = Dest;\nvar DestDir = (function (_super) {\n    __extends(DestDir, _super);\n    function DestDir() {\n        _super.apply(this, arguments);\n    }\n    return DestDir;\n})(Dest);\nexports.DestDir = DestDir;\nvar DestFile = (function (_super) {\n    __extends(DestFile, _super);\n    function DestFile() {\n        _super.apply(this, arguments);\n    }\n    return DestFile;\n})(Dest);\nexports.DestFile = DestFile;\nvar DestOut = (function (_super) {\n    __extends(DestOut, _super);\n    function DestOut() {\n        _super.apply(this, arguments);\n    }\n    return DestOut;\n})(Dest);\nexports.DestOut = DestOut;\nfunction create(context) {\n    return null;\n}\nexports.create = create;\n");

axy.define("/src/node_modules/axy-define-asm/lib/context/filter.js", "/// <reference path=\"../../typing/node.d.ts\" />\n\"use strict\";\nvar path = require(\"path\");\nvar Filter = (function () {\n    function Filter(options) {\n        this.options = options;\n        this.exts = { js: true, json: true, map: false };\n        this.all = false;\n        this.ignoredFiles = {};\n        this.ignoredDirs = {};\n        var self = this;\n        if (typeof options.filter === \"function\") {\n            this.custom = options.filter;\n        }\n        options.addExt.forEach(function (item) {\n            self.exts[item] = true;\n        });\n        if (options.all) {\n            this.all = true;\n        }\n        options.ignoreDir.forEach(function (item) {\n            self.ignoredDirs[item] = true;\n        });\n        options.ignoreFile.forEach(function (item) {\n            self.ignoredFiles[item] = true;\n        });\n        options.ignoreExt.forEach(function (item) {\n            self.exts[item] = false;\n        });\n    }\n    Filter.prototype.filter = function (filename, isDir) {\n        var options = this.options, basename, ext, lExt;\n        if (isDir) {\n            if (this.ignoredDirs[filename]) {\n                return false;\n            }\n        }\n        else {\n            ext = path.extname(filename).slice(1);\n            lExt = this.exts[ext];\n            if ((lExt === false) || ((lExt !== true) && (!this.all))) {\n                return false;\n            }\n            if (this.ignoredFiles[filename]) {\n                return false;\n            }\n        }\n        if (this.custom) {\n            basename = path.basename(filename);\n            return this.custom.call(null, filename, basename, ext, isDir, options);\n        }\n        return true;\n    };\n    return Filter;\n})();\nexports.Filter = Filter;\n");

axy.define("/src/node_modules/axy-define-asm/lib/context/finder.js", "/**\n * Finds source files, transmits them to the wrapper and to the writer\n *\n * Options that affect search:\n * - addExt\n * - all\n * - ignoreDir\n * - ignoreExt\n * - ignoreFile\n *\n * Additionally\n * - verbose - for log\n */\n/// <reference path=\"../../typing/node.d.ts\" />\n\"use strict\";\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar Finder = (function () {\n    function Finder(context) {\n        this.context = context;\n        this.source = this.context.options.source;\n        this.counter = this.context.counter;\n        this.root = this.context.options.root;\n    }\n    Finder.prototype.run = function () {\n        var stat;\n        if (!fs.existsSync(this.source)) {\n            return this.context.error(\"Not found file or directory \" + this.source);\n        }\n        stat = fs.statSync(this.source);\n        if (stat.isFile()) {\n            this.runFile();\n        }\n        else if (stat.isDirectory()) {\n            this.runDirectory();\n        }\n        else {\n            return this.context.error(\"Source \" + this.source + \" is not file or directory\");\n        }\n    };\n    Finder.prototype.runFile = function () {\n        this.processFile(\"/index\" + path.extname(this.source), this.source);\n    };\n    Finder.prototype.runDirectory = function () {\n        var context = this.context, self = this;\n        function dir(full, short) {\n            context.counter.begin(\"Dir \" + short);\n            fs.readdir(full, function (err, files) {\n                if (err) {\n                    context.counter.done();\n                    context.error(err.message);\n                }\n                else {\n                    files.forEach(function (file) {\n                        var fullname = full + \"/\" + file, shortname = short + \"/\" + file;\n                        context.counter.begin(\"File \" + shortname);\n                        fs.stat(fullname, function (err, stat) {\n                            if (err) {\n                                context.counter.done(\"File \" + shortname);\n                                context.error(err.message);\n                            }\n                            else if (stat.isFile()) {\n                                if (self.filter(shortname, fullname, false)) {\n                                    context.out.log(shortname, 1);\n                                    self.processFile(shortname, fullname);\n                                }\n                                else {\n                                    context.out.log(\"Ignore file \" + shortname, 2);\n                                }\n                                context.counter.done(\"File \" + shortname);\n                            }\n                            else {\n                                if (self.filter(shortname, fullname, true)) {\n                                    dir(fullname, shortname);\n                                }\n                                else {\n                                    context.out.log(\"Ignore directory \" + shortname, 2);\n                                }\n                                context.counter.done(\"File \" + shortname);\n                            }\n                        });\n                    });\n                    context.counter.done(\"Dir \" + short);\n                }\n            });\n        }\n        dir(this.source, \"\");\n    };\n    Finder.prototype.processFile = function (shortname, fullname) {\n        if (fullname === void 0) { fullname = null; }\n        var context = this.context, ext = path.extname(shortname).slice(1);\n        if (!fullname) {\n            fullname = this.source + \"/\" + shortname;\n        }\n        context.counter.begin(\"Process \" + shortname);\n        fs.readFile(fullname, \"utf-8\", function (err, content) {\n            var wrapped;\n            if (err) {\n                context.counter.done(\"Process \" + shortname);\n                context.error(err.message);\n            }\n            else {\n                wrapped = context.wrapper.wrap(content, shortname, ext);\n                context.writer.write(shortname, wrapped);\n                context.counter.done(\"Process \" + shortname);\n            }\n        });\n    };\n    Finder.prototype.filter = function (shortname, fullname, isDir) {\n        return this.context.filter.filter(shortname, isDir);\n    };\n    return Finder;\n})();\nexports.Finder = Finder;\n");

axy.define("/src/node_modules/axy-define-asm/lib/context/index.js", "\"use strict\";\nvar check = require(\"./check\");\nvar outMo = require(\"./out\");\nvar counterMo = require(\"./counter\");\nvar wrapperMo = require(\"./wrapper\");\nvar finderMo = require(\"./finder\");\nvar filterMo = require(\"./filter\");\nvar writerMo = require(\"./writer\");\nvar Context = (function () {\n    function Context(options, gDone) {\n        var _this = this;\n        this.options = options;\n        this.gDone = gDone;\n        /* tslint:disable:typedef */\n        this.done = function () {\n            _this.writer.flush();\n            if (typeof _this.gDone === \"function\") {\n                _this.gDone.call(null);\n            }\n        };\n        check(options);\n        this.out = outMo.create(options);\n        this.counter = new counterMo.Counter(this.done);\n        this.wrapper = new wrapperMo.Wrapper(options);\n        this.finder = new finderMo.Finder(this);\n        this.filter = new filterMo.Filter(options);\n        this.writer = writerMo.create(this);\n    }\n    Context.prototype.error = function (message) {\n        if (message === void 0) { message = null; }\n        throw new Error(message);\n    };\n    return Context;\n})();\nexports.Context = Context;\n");

axy.define("/src/node_modules/axy-define-asm/lib/context/out.js", "\"use strict\";\nvar Out = (function () {\n    function Out(level, sOut, sErr) {\n        if (sOut === void 0) { sOut = process.stdout; }\n        if (sErr === void 0) { sErr = process.stderr; }\n        this.level = level;\n        this.sOut = sOut;\n        this.sErr = sErr;\n    }\n    Out.prototype.write = function (message) {\n        this.sOut.write(message);\n    };\n    Out.prototype.log = function (message, level) {\n        if (level === void 0) { level = 1; }\n        if (level <= this.level) {\n            this.write(message + \"\\n\");\n        }\n    };\n    Out.prototype.error = function (message) {\n        this.sErr.write(message + \"\\n\");\n    };\n    return Out;\n})();\nexports.Out = Out;\nfunction create(options) {\n    var level = options.verbose;\n    if (!level) {\n        level = 0;\n    }\n    else if (level === true) {\n        level = 1;\n    }\n    return new Out(level);\n}\nexports.create = create;\n");

axy.define("/src/node_modules/axy-define-asm/lib/context/wrapper.js", "/**\n * Wraps the content of a file\n *\n * Options that affect wrap:\n * - appendVars\n * - define\n * - globalWrapper\n * - pretty\n * - root\n * - useStrict\n * - allText\n * - fixTS\n */\n\"use strict\";\nvar Wrapper = (function () {\n    function Wrapper(options) {\n        this.options = options;\n    }\n    Wrapper.prototype.wrap = function (content, filename, ext) {\n        var iWrapper, fn;\n        if (this.options.wrap) {\n            iWrapper = this.options.wrap.call(null, content, filename, ext, this.options);\n        }\n        if (typeof iWrapper !== \"string\") {\n            iWrapper = this.w(content, ext);\n        }\n        fn = filename;\n        if (this.options.root !== \"/\") {\n            fn = this.options.root + fn;\n        }\n        return this.options.define + \"(\\\"\" + fn + \"\\\", \" + iWrapper + \");\";\n    };\n    Wrapper.prototype.w = function (content, ext) {\n        if (!this.options.allText) {\n            if (ext === \"js\") {\n                return this.wJS(content);\n            }\n            else if (ext === \"json\") {\n                return this.wJSON(content);\n            }\n        }\n        else if (ext === \"js\") {\n            content = this.processCode(content);\n        }\n        return this.wOther(content);\n    };\n    Wrapper.prototype.wJS = function (content) {\n        var top = [], bottom = [], topS, bottomS, vars = \"exports, require, module, __filename, __dirname\", pretty = this.options.pretty, indent = \"\", append = this.options.appendVars;\n        if (append) {\n            append = \", \" + append;\n        }\n        top.push(\"function (\" + vars + append + \") {\");\n        bottom.push(\"}\");\n        if (pretty) {\n            indent = \"    \";\n        }\n        if (this.options.useStrict) {\n            top.push(indent + \"\\\"use strict\\\";\");\n        }\n        if (this.options.globalWrapper && append) {\n            top.push(indent + \"(function (\" + vars + \") {\");\n            bottom.push(indent + \"})(\" + vars + \");\");\n            if (pretty) {\n                indent += \"    \";\n            }\n        }\n        bottom = bottom.reverse();\n        content = this.processCode(content);\n        if (pretty) {\n            topS = top.join(\"\\n\");\n            bottomS = bottom.join(\"\\n\");\n            content = indent + content.replace(/\\n/g, \"\\n\" + indent).replace(/\\s+$/, \"\");\n        }\n        else {\n            topS = top.join(\" \");\n            bottomS = bottom.join(\" \");\n        }\n        return topS + \"\\n\" + content + \"\\n\" + bottomS;\n    };\n    Wrapper.prototype.wJSON = function (content) {\n        if (content.charAt(0) === \"\\\"\") {\n            return \"(function () {return \" + content + \";})\";\n        }\n        return content;\n    };\n    Wrapper.prototype.wOther = function (content) {\n        return \"\\\"\" + content.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\\"/g, \"\\\\\\\"\").replace(/\\n/g, \"\\\\n\") + \"\\\"\";\n    };\n    Wrapper.prototype.processCode = function (content) {\n        if (content.slice(0, 2) === \"#!\") {\n            content = content.replace(/^.*?\\n/, \"\");\n        }\n        content = this.fixTS(content);\n        return content;\n    };\n    Wrapper.prototype.fixTS = function (content) {\n        if (this.options.fixTS) {\n            content = content.replace(/this\\.__extends \\|\\|/g, \"(this && this.__extends) ||\");\n        }\n        return content;\n    };\n    return Wrapper;\n})();\nexports.Wrapper = Wrapper;\n");

axy.define("/src/node_modules/axy-define-asm/lib/context/writer.js", "/// <reference path=\"../../typing/node.d.ts\" />\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar Writer = (function () {\n    function Writer(context) {\n        this.context = context;\n    }\n    Writer.prototype.write = function (shortname, content) {\n    };\n    Writer.prototype.flush = function () {\n    };\n    return Writer;\n})();\nexports.Writer = Writer;\nvar WriterFile = (function (_super) {\n    __extends(WriterFile, _super);\n    function WriterFile(context) {\n        _super.call(this, context);\n        this.context = context;\n        this.content = [];\n        if (context.options.outFile) {\n            this.filename = context.options.outFile;\n        }\n        else {\n            this.filename = context.options.source;\n        }\n    }\n    WriterFile.prototype.write = function (shortname, content) {\n        this.content.push(content);\n    };\n    WriterFile.prototype.flush = function () {\n        fs.writeFileSync(this.filename, this.content.join(\"\\n\\n\"), \"utf-8\");\n    };\n    return WriterFile;\n})(Writer);\nexports.WriterFile = WriterFile;\nvar WriterDir = (function (_super) {\n    __extends(WriterDir, _super);\n    function WriterDir(context) {\n        _super.call(this, context);\n        this.context = context;\n        this.exists = {};\n        if (context.options.outDir) {\n            this.dirname = context.options.outDir;\n            if (!fs.existsSync(this.dirname)) {\n                try {\n                    fs.mkdirSync(this.dirname);\n                    this.context.out.log(\"Make dir \" + this.dirname, 2);\n                }\n                catch (e) {\n                    context.error(\"Can not create a directory \" + this.dirname);\n                }\n            }\n        }\n        else {\n            this.dirname = context.options.source;\n        }\n    }\n    WriterDir.prototype.write = function (shortname, content) {\n        var filename = this.dirname + shortname, context = this.context;\n        context.counter.begin(\"Write \" + shortname);\n        this.createPath(shortname);\n        fs.writeFile(filename, content, \"utf-8\", function (err) {\n            context.counter.done(\"Write \" + shortname);\n            if (err) {\n                context.error(\"Can not create a file \" + filename);\n            }\n        });\n    };\n    WriterDir.prototype.createPath = function (shortname) {\n        var dirname = path.dirname(shortname), full;\n        if ((dirname === \"/\") || (dirname === \".\") || (!dirname)) {\n            return;\n        }\n        if (this.exists[dirname]) {\n            return;\n        }\n        full = this.dirname + dirname;\n        if (!fs.existsSync(full)) {\n            this.createPath(dirname);\n            try {\n                fs.mkdirSync(full);\n                this.context.out.log(\"Make dir \" + dirname, 2);\n            }\n            catch (e) {\n                this.context.error(\"Can not create a directory \" + full);\n            }\n        }\n    };\n    return WriterDir;\n})(Writer);\nexports.WriterDir = WriterDir;\nvar WriterOut = (function (_super) {\n    __extends(WriterOut, _super);\n    function WriterOut(context) {\n        _super.call(this, context);\n        this.context = context;\n    }\n    WriterOut.prototype.write = function (shortname, content) {\n        this.context.out.write(content + \"\\n\\n\");\n    };\n    return WriterOut;\n})(Writer);\nexports.WriterOut = WriterOut;\nvar WriterChain = (function (_super) {\n    __extends(WriterChain, _super);\n    function WriterChain() {\n        _super.apply(this, arguments);\n        this.children = [];\n    }\n    WriterChain.prototype.append = function (child) {\n        this.children.push(child);\n    };\n    WriterChain.prototype.write = function (shortname, content) {\n        this.children.forEach(function (child) {\n            child.write(shortname, content);\n        });\n    };\n    WriterChain.prototype.flush = function () {\n        this.children.forEach(function (child) {\n            child.flush();\n        });\n    };\n    return WriterChain;\n})(Writer);\nexports.WriterChain = WriterChain;\nfunction create(context) {\n    var options = context.options, writer, writerOut, writerChain;\n    if (options.outDir) {\n        writer = new WriterDir(context);\n    }\n    else if (options.outFile) {\n        writer = new WriterFile(context);\n    }\n    else if (options.outSelf) {\n        if (!fs.existsSync(options.source)) {\n            return null;\n        }\n        if (fs.statSync(options.source).isDirectory()) {\n            writer = new WriterDir(context);\n        }\n        else {\n            writer = new WriterFile(context);\n        }\n    }\n    if (!options.out) {\n        return writer;\n    }\n    writerOut = new WriterOut(context);\n    if (!writer) {\n        return writerOut;\n    }\n    writerChain = new WriterChain(context);\n    writerChain.append(writer);\n    writerChain.append(writerOut);\n    return writerChain;\n}\nexports.create = create;\n");

axy.define("/src/node_modules/axy-define-asm/lib/options/api.js", "/**\n * Options for API\n */\n\"use strict\";\n/**\n * Default values of the options\n */\nexports.defaults = {\n    source: null,\n    outDir: null,\n    outSelf: false,\n    outFile: null,\n    out: true,\n    root: \"/\",\n    define: \"axy.define\",\n    appendVars: \"global, process\",\n    globalWrapper: false,\n    addExt: [],\n    all: false,\n    ignoreExt: [],\n    ignoreFile: [],\n    ignoreDir: [],\n    sourceMap: false,\n    verbose: false,\n    useStrict: false,\n    utime: false,\n    error: false,\n    pretty: false,\n    allText: false,\n    fixTS: false,\n    filter: null,\n    wrap: null\n};\n/**\n * Merges custom options with defaults\n *\n * @param {object} custom\n * @return {object}\n */\nfunction merge(custom) {\n    var result = {}, k;\n    for (k in exports.defaults) {\n        if (exports.defaults.hasOwnProperty(k)) {\n            if (custom.hasOwnProperty(k)) {\n                result[k] = custom[k];\n            }\n            else {\n                result[k] = exports.defaults[k];\n            }\n        }\n    }\n    return result;\n}\nexports.merge = merge;\n");

axy.define("/src/node_modules/axy-define-asm/lib/options/cli.js", "/**\n * Command line options format\n */\n/// <reference path=\"../../node_modules/axy-cli-opts/index.d.ts\" alias=\"axy-cli-opts\" />\n\"use strict\";\n/**\n * The format of command line options\n * @see axy-cli-opts\n */\nexports.format = {\n    source: {\n        short: \"s\",\n        description: \"Source file or directory\",\n        descriptionVal: \"dir|file\"\n    },\n    outDir: {\n        defaults: null,\n        description: \"Output directory (follow the structure of source)\",\n        descriptionVal: \"dir\"\n    },\n    outFile: {\n        defaults: null,\n        description: \"Assemble to a single file\",\n        descriptionVal: \"file\"\n    },\n    outSelf: {\n        flag: true,\n        description: \"Rewrite source file(s)\"\n    },\n    out: {\n        short: \"o\",\n        flag: true,\n        description: \"Output to stdout\"\n    },\n    root: {\n        short: \"r\",\n        description: \"Root directory\",\n        descriptionVal: \"dir\",\n        defaults: \"/\"\n    },\n    define: {\n        short: \"d\",\n        defaults: \"axy.define\",\n        description: \"Name of define function (axy.define by default)\",\n        descriptionVal: \"prefix\"\n    },\n    appendVars: {\n        defaults: \"global, process\",\n        description: \"Append vars to the wrapper (by default 'process, global')\",\n        descriptionVal: \"vars\"\n    },\n    globalWrapper: {\n        flag: true,\n        description: \"Top wrapper for appendVars\"\n    },\n    addExt: {\n        many: true,\n        defaults: [],\n        description: \"Add an extension to assembly\",\n        descriptionVal: \"ext\"\n    },\n    all: {\n        short: \"a\",\n        flag: true,\n        description: \"Add all files\"\n    },\n    ignoreExt: {\n        many: true,\n        defaults: [],\n        description: \"Ignore an extension\",\n        descriptionVal: \"ext\"\n    },\n    ignoreFile: {\n        many: true,\n        defaults: [],\n        description: \"Ignore a file\",\n        descriptionVal: \"file\"\n    },\n    ignoreDir: {\n        many: true,\n        defaults: [],\n        description: \"Ignore a dir\",\n        descriptionVal: \"dir\"\n    },\n    sourceMap: {\n        flag: true,\n        description: \"Changing the source map\"\n    },\n    verbose: {\n        flag: true,\n        type: \"id\",\n        mixed: true,\n        description: \"Verbose level (1, 2), silence by default\",\n        descriptionVal: \"level\"\n    },\n    useStrict: {\n        short: \"u\",\n        flag: true,\n        description: \"Add 'use strict'\"\n    },\n    pretty: {\n        short: \"p\",\n        flag: true,\n        description: \"Formatted output\"\n    },\n    utime: {\n        short: \"t\",\n        flag: true,\n        description: \"Check update time of destination files\"\n    },\n    error: {\n        short: \"e\",\n        flag: true,\n        description: \"Show information about errors\"\n    },\n    allText: {\n        flag: true,\n        description: \"Process all files as text\"\n    },\n    fixTS: {\n        flag: true,\n        description: \"Fix TypeScript artifacts\"\n    }\n};\n");

axy.define("/src/node_modules/axy-define-asm/node_modules/axy-cli-opts/package.json", "{\n  \"name\": \"axy-cli-opts\",\n  \"version\": \"0.0.4\",\n  \"description\": \"Simplest Parser Command Line Arguments\",\n  \"license\": \"MIT\",\n  \"homepage\": \"https://github.com/axyjs/axy-cli-opts\",\n  \"author\": {\n    \"name\": \"Oleg Grigoriev\",\n    \"email\": \"go.vasac@gmail.com\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/axyjs/axy-cli-opts\"\n  },\n  \"main\": \"src/opts.js\",\n  \"files\": [\n    \"src/opts.js\",\n    \"index.d.ts\",\n    \"LICENSE\"\n  ],\n  \"dependencies\": {},\n  \"keywords\": [\n    \"cli\",\n    \"command line\"\n  ],\n  \"devDependencies\": {\n    \"grunt\": \"~0.4.5\",\n    \"grunt-typescript\": \"~0.6.1\",\n    \"grunt-contrib-nodeunit\": \"~0.4.1\",\n    \"grunt-tslint\": \"2.0.0\",\n    \"grunt-contrib-jshint\": \"~0.11.1\",\n    \"grunt-jsonlint\": \"~1.0.4\"\n  },\n  \"readme\": \"# Simplest Parser Command Line Arguments (Node.js)\\n\\n* GitHub: [axyjs/axy-cli-opts](https://github.com/axyjs/axy-cli-opts)\\n* NPM: [axy-cli-opts](https://www.npmjs.com/package/axy-cli-opts)\\n* Author: Oleg Grigoriev\\n* LICENSE: MIT\\n\\n## How to use\\n\\nInstall:\\n\\n```\\nnpm install --save axy-cli-opts\\n```\\n\\nUse:\\n\\n```javascript\\nvar opts = require(\\\"axy-cli-opts\\\");\\n\\nvar args = opts.parse();\\n```\\n\\n## Agreement of the CLI Arguments\\n\\nThe library work with follow format of command line arguments.\\n\\nFor example:\\n```\\nnode index.js --opt=value -x2 -f arg1 arg2\\n```\\n\\nAll components that begin with `-` is short options.\\nThat begin with `--` is long options.\\nAll others is arguments.\\n\\n### Long Options\\n\\n`--opt=value`.\\nHere `opt` is the option name, `value` is the option value.\\n\\n`--opt` it is \\\"flag\\\".\\nValue of this option is `TRUE`.\\n\\n`--opt=` it is not flag.\\nValue of this options is empty string.\\n\\n### Short Options\\n\\nShort options consist of a signle character.\\nThe value immediately follows the option name (without spaces).\\n\\n`-qwer` is option `q` with value `wer`.\\nAnalogue of `--q=wer`.\\n\\n`-q` is flag.\\n\\n### Multiple Options\\n\\n```\\nmysqldump --add-locks --compress --ignore-table=log --ignore-table=sessions database\\n```\\n\\nIn the example the option `--ignore-table` was specified multiple times.\\nThe values of such options are stored into an array.\\n\\n## `parse([argv: string[] [, format: object]):object`\\n\\nThe library provides two methods: `parse()` and `help()`.\\n`parse()` returns values of options.\\n\\n### Simple Format\\n\\nIf the argument `format` is not specified then the library loads all options without cheking\\nwithout distinguishing between short and long and etc.\\n\\n```javascript\\nconsole.log(opts.parse());\\n```\\n\\nRun:\\n\\n```javascript\\nnode index.js -a -b2 --opt=1 --opt=2 arg1 arg2\\n```\\n\\nOut:\\n\\n```javascript\\n{\\n    args: [ // list of arguments\\n        'arg1',\\n        'arg2'\\n    ],\\n    options: { // values of options\\n        a: true,  // -a - flag\\n        b: '2',   // -b2\\n        opt: ['1', '2']  // multiple option\\n    }\\n};\\n```\\n\\nIf the first argument `argv` is not specified used `process.argv.slice(2)`.\\n`argv` taken the array of cli components.\\n\\n```javascript\\nopts.parse([\\\"-a\\\", \\\"-b2\\\", \\\"--opt=1\\\", \\\"arg\\\"]);\\n```\\n\\n### Format\\n\\nIf the argument `format` is specified then options are checked and loaded in accordance with it.\\n\\nIt is dictionary: the long option name => the option format.\\nThe options format contains the follows fields.\\n\\n##### `short (string)`\\n\\nThe short alias for the long name.\\nShort options can not exist by themselves.\\nJust as an alias.\\n\\n```javascript\\nvar format = {\\n    one: {\\n        short: \\\"o\\\"\\n    },\\n    two: {\\n        short: \\\"t\\\"\\n    }\\n};\\n\\nopts.parse([\\\"--one=1\\\",  \\\"-t2\\\"], format); // {args: [], options: {one: \\\"1\\\", two: \\\"2\\\"}}\\n\\nopts.parse([\\\"--one=1\\\", \\\"-x3\\\"], format); // Error: Unknown option '-x'\\n```\\n\\n##### `flag (boolean)`\\n\\nIndicates that the option is a flag.\\n\\n```javascript\\nvar format = {\\n    one: {\\n        short: \\\"o\\\",\\n        flag: true\\n    },\\n    two: {\\n        short: \\\"t\\\"\\n    }\\n};\\n\\nopts.parse([\\\"-o\\\",  \\\"-t2\\\"], format); // {args: [], options: {one: true, two: '2'}}\\n\\nopts.parse([\\\"-o1\\\", \\\"-t2\\\"], format); // Error: Option '--one' is flag\\n\\nopts.parse([\\\"-o\\\", \\\"-t\\\"], format); // Error: Option '--two' is not flag\\n```\\n\\n##### `mixed (boolean)`\\n\\nAllows the option marked as flag also take other values.\\n\\n##### `type (string)`\\n\\nType validation.\\nDefines three types: `string` (by default), `int` and `id`.\\n\\n`int` is an integer, `id` is a positive integer > 0.\\n\\n```javascript\\nvar format = {\\n    id: {\\n        type: \\\"id\\\"\\n    }\\n};\\n\\nopts.parse([\\\"--id=-3\\\"], format); // Option '--id' must be a positive integer\\n```\\n\\nThe values cast to number type (in other cases it will be a string).\\n\\n##### `many (boolean)`\\n\\nAllows multiple options.\\n\\n```javascript\\nvar format = {\\n    one: {\\n        short: \\\"o\\\"\\n    },\\n    two: {\\n        short: \\\"t\\\",\\n        many: true\\n    }\\n};\\n\\n\\nopts.parse([\\\"-o1\\\", \\\"-t2\\\", \\\"--two=3\\\", \\\"-t4\\\"], format); // {args: [], options: {one: '1', two: ['2', '3', '4']}}\\n\\nopts.parse([\\\"-o1\\\", \\\"-t2\\\"], format); // {args: [], options: {one: '1', two: ['2']}}\\n\\nopts.parse([\\\"-o1\\\", \\\"-o2\\\", \\\"-t3\\\"], format); // Error: Duplicate option '--one'\\n```\\n\\nEach value of `many`-option will passes all the checks in other format fields.\\n\\n##### `defaults (any)`\\n\\n`parse()` returns all options that specified in the format.\\nIf any option is not specified, then used `defaults` field.\\nIf this field is not specified, it option is required.\\n\\n```javascript\\nvar format = {\\n    one: {\\n    },\\n    two: {\\n        defaults: \\\"value\\\"\\n    }\\n};\\n\\nopts.parse([\\\"--one=1\\\"], format); // {args: [], options: {one: '1', two: 'value'}}\\n\\nopts.parse([\\\"--two=2\\\"], format); // Error: Required option '--one'\\n```\\n\\n###### `defaults` and `many`\\n\\nFor `many` options:\\n\\nIf `defaults` is scalar and the option is not specified used an array `[defaults]` for result.\\n\\nIf `defaults` is scalar and the option is specified then `defaults` is erased.\\n\\nIf `defaults` is array then specified values will be added to this array.\\n\\n```javascript\\nvar format = {\\n    one: {\\n        many: true,\\n        defaults: 1\\n    },\\n    two: {\\n        many: true,\\n        defaults: 2\\n    },\\n    three: {\\n        many: true,\\n        type: \\\"id\\\",\\n        defaults: [3, 4]\\n    }\\n};\\n\\nvar args = [\\\"--two=5\\\", \\\"--two=6\\\", \\\"--three=7\\\", \\\"--three=8\\\"];\\n\\nconsole.log(opts.parse(args, format));\\n\\n/* Result:\\n{\\nargs: [],\\noptions: {\\n    one: [1],\\n    two: ['5', '6'],\\n    three: [3, 4, '7', '8'],\\n}\\n}\\n*/\\n```\\n\\n##### `filter (function)`\\n\\nThis function calls after other validations (`type` and `flag`).\\nThe result of this function uses as option value.\\nThe function can act as a validator - just throws an exception.\\n\\nThe arguments list of the filter:\\n\\n* `value` - the value from CLI arguments list\\n* `name` - the option name\\n* `current` - the current value of the option (for `many`-options could contains an array of previous options)\\n\\nThe filter called in the context of the format array of this option.\\n\\n##### `description` and `descriptionVal`\\n\\nSee `help()` method.\\n\\n##### Other values\\n\\nAny other values may be used in the `filter`.\\n\\n## `help(format: object): string`\\n\\nReturns the help information about the options format.\\n\\n```javascript\\nvar format = {\\n    version: {\\n        short: \\\"v\\\",\\n        flag: true,\\n        description: \\\"print version\\\",\\n    },\\n    'icu-data-dir': {\\n        description: \\\"set ICU data load path to dir\\\\n(overrides NODE_ICU_DATA)\\\",\\n        descriptionVal: \\\"dir\\\"\\n    },\\n    'enable-ssl-2': {\\n        flag: true,\\n        description: \\\"enable ssl2\\\"\\n    },\\n    'help': {\\n        short: \\\"h\\\",\\n        flag: true,\\n    }\\n};\\n\\nconsole.log(opts.help(format));\\n```\\n\\nOutput:\\n\\n```\\n--enable-ssl-2     enable ssl2\\n-h, --help\\n--icu-data-dir=dir set ICU data load path to dir\\n                   (overrides NODE_ICU_DATA)\\n-v, --version      print version\\n```\\n\\n## Example\\n\\n```javascript\\nvar opts = require(\\\"axy-cli-opts\\\");\\nvar format = {\\n    // ...\\n};\\n\\ntry {\\n    var args = opts.parse(null, format);\\n} catch (e) {\\n    console.log(\\\"Error: \\\" + e.message);\\n    console.log(\\\"Format: ./script.js <options> argument\\\");\\n    console.log(\\\"\\\");\\n    console.log(opts.help(format));\\n    process.exit(1);\\n}\\n```\\n\",\n  \"readmeFilename\": \"README.md\",\n  \"gitHead\": \"05c9e16908fdab69d7958fb129a9221bacb80303\",\n  \"bugs\": {\n    \"url\": \"https://github.com/axyjs/axy-cli-opts/issues\"\n  },\n  \"_id\": \"axy-cli-opts@0.0.4\",\n  \"scripts\": {},\n  \"_shasum\": \"9ae60edd8f5dd4eff9974a4074919b9edaba0189\",\n  \"_from\": \"axy-cli-opts@0.0.4\"\n}\n");

axy.define("/src/node_modules/axy-define-asm/node_modules/axy-cli-opts/src/opts.js", "\"use strict\";\n/**\n * Parses an arguments list\n *\n * @param {string[]} argv [optional]\n *        the arguments list (by default from `process.argv`)\n * @param {object} format [optional]\n * @return {object}\n * @throws {Error}\n */\nfunction parse(argv, format) {\n    if (argv === void 0) { argv = null; }\n    if (format === void 0) { format = null; }\n    var args = [], options = {}, result = {\n        args: args,\n        options: options\n    }, len, i, arg, shorts;\n    if (!argv) {\n        argv = process.argv.slice(2);\n    }\n    if (format) {\n        shorts = createShortMap(format);\n    }\n    for (i = 0, len = argv.length; i < len; i += 1) {\n        arg = argv[i];\n        if (arg.charAt(0) === \"-\") {\n            parseOption(arg, options, format, shorts);\n        }\n        else {\n            args.push(arg);\n        }\n    }\n    if (format) {\n        setDefaults(format, options);\n    }\n    return result;\n}\nexports.parse = parse;\nvar isArray = Array.isArray;\nfunction createShortMap(format) {\n    if (format === void 0) { format = null; }\n    var result = {}, k, option;\n    for (k in format) {\n        if (format.hasOwnProperty(k)) {\n            option = format[k];\n            if (option.short) {\n                result[option.short] = k;\n            }\n        }\n    }\n    return result;\n}\nfunction parseOption(arg, options, format, shorts) {\n    var long = (arg.charAt(1) === \"-\"), name, value, val, e, fOption;\n    arg = arg.slice(long ? 2 : 1);\n    if (arg === \"\") {\n        throw new Error(\"Found an empty option\");\n    }\n    if (long) {\n        e = arg.split(\"=\");\n        name = e[0];\n        if (name === \"\") {\n            throw new Error(\"Found an empty option\");\n        }\n        if (e.length === 1) {\n            value = true;\n        }\n        else {\n            value = e.slice(1).join(\"=\");\n        }\n    }\n    else {\n        name = arg.charAt(0);\n        if (arg.length === 1) {\n            value = true;\n        }\n        else {\n            value = arg.slice(1);\n        }\n    }\n    if (!format) {\n        val = options[name];\n        if (val !== void 0) {\n            if (isArray(val)) {\n                val.push(value);\n                value = val;\n            }\n            else {\n                value = [val, value];\n            }\n        }\n        options[name] = value;\n    }\n    else {\n        if (!long) {\n            if (!shorts[name]) {\n                throw new Error(\"Unknown option '-\" + name + \"'\");\n            }\n            name = shorts[name];\n            fOption = format[name];\n        }\n        else if (format[name]) {\n            fOption = format[name];\n        }\n        else {\n            throw new Error(\"Unknown option '--\" + name + \"'\");\n        }\n        formatOption(name, value, options, fOption);\n    }\n}\nfunction formatOption(name, value, options, format) {\n    var cValue;\n    value = validation(value, name, format, options);\n    cValue = options[name];\n    if (cValue !== void 0) {\n        if (format.many) {\n            cValue.push(value);\n            value = cValue;\n        }\n        else {\n            throw new Error(\"Duplicate option '--\" + name + \"'\");\n        }\n    }\n    else if (format.many) {\n        if (isArray(format.defaults)) {\n            cValue = format.defaults.slice(0);\n            cValue.push(value);\n            value = cValue;\n        }\n        else {\n            value = [value];\n        }\n    }\n    options[name] = value;\n}\nfunction validation(value, name, format, options) {\n    if (value === true) {\n        if (!format.flag) {\n            throw new Error(\"Option '--\" + name + \"' is not flag\");\n        }\n    }\n    else {\n        switch (format.type) {\n            case \"int\":\n                if (!/^\\-?([0-9]+)$/.test(value)) {\n                    throw new Error(\"Option '--\" + name + \"' must be an integer\");\n                }\n                value = parseInt(value, 10);\n                break;\n            case \"id\":\n                if (!/^[1-9]([0-9]*)$/.test(value)) {\n                    throw new Error(\"Option '--\" + name + \"' must be a positive integer\");\n                }\n                value = parseInt(value, 10);\n                break;\n        }\n        if (format.flag && (!format.mixed)) {\n            throw new Error(\"Option '--\" + name + \"' is flag\");\n        }\n    }\n    if (format.filter) {\n        value = format.filter(value, name, options[name]);\n    }\n    return value;\n}\nfunction setDefaults(format, options) {\n    var k, fOption, defaults;\n    for (k in format) {\n        if (format.hasOwnProperty(k)) {\n            if (!options.hasOwnProperty(k)) {\n                fOption = format[k];\n                defaults = fOption.defaults;\n                if (defaults === void 0) {\n                    if (fOption.flag) {\n                        defaults = false;\n                    }\n                    else {\n                        throw new Error(\"Required option '--\" + k + \"'\");\n                    }\n                }\n                if (fOption.many && (!isArray(defaults))) {\n                    defaults = [defaults];\n                }\n                options[k] = defaults;\n            }\n        }\n    }\n}\n/**\n * Returns the help information about the options format\n *\n * @param {object} format\n * @returns {string}\n */\nfunction help(format) {\n    var lines = [], opts = [], name, k, max = 0, fOption;\n    for (k in format) {\n        if (format.hasOwnProperty(k)) {\n            fOption = format[k];\n            name = \"--\" + k;\n            if (fOption.descriptionVal) {\n                if (fOption.flag) {\n                    name += \"=[\" + fOption.descriptionVal + \"]\";\n                }\n                else {\n                    name += \"=\" + fOption.descriptionVal;\n                }\n            }\n            if (fOption.short) {\n                name = \"-\" + fOption.short + \", \" + name;\n            }\n            else {\n                name = \"    \" + name;\n            }\n            max = Math.max(max, name.length);\n            opts.push({\n                k: k,\n                name: name,\n                description: fOption.description\n            });\n        }\n    }\n    opts = opts.sort(function (a, b) {\n        if (a.k < b.k) {\n            return -1;\n        }\n        else if (a.k > b.k) {\n            return 1;\n        }\n        return 0;\n    });\n    max += 2;\n    opts.forEach(function (item) {\n        var top, desc;\n        top = item.name;\n        if (item.description) {\n            desc = item.description.split(\"\\n\");\n            top += (new Array(max - top.length)).join(\" \") + desc[0];\n            lines.push(top);\n            desc.slice(1).forEach(function (l) {\n                lines.push((new Array(max)).join(\" \") + l);\n            });\n        }\n        else {\n            lines.push(top);\n        }\n    });\n    return lines.join(\"\\n\");\n}\nexports.help = help;\n");